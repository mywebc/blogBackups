<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript基础知识复习 on 陈晓拉尼</title>
    <link>https://chenxiaolani.com/tags/javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/</link>
    <description>Recent content in javascript基础知识复习 on 陈晓拉尼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 09 Aug 2017 19:35:54 +0000</lastBuildDate><atom:link href="https://chenxiaolani.com/tags/javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript基础知识复习（五）函数的四种调用模式</title>
      <link>https://chenxiaolani.com/2017/javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%E4%BA%94%E5%87%BD%E6%95%B0%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%B0%83%E7%94%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 09 Aug 2017 19:35:54 +0000</pubDate>
      
      <guid>https://chenxiaolani.com/2017/javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%E4%BA%94%E5%87%BD%E6%95%B0%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%B0%83%E7%94%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;&lt;strong&gt;一、函数模式&lt;/strong&gt;
这个我们再熟悉不过了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;；&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//这里函数名调用，就是函数模式
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：这里的this指的是window全局对象；
&lt;strong&gt;二、方法模式&lt;/strong&gt;
函数放在对象内，是对象的一个属性，我们调用函数，这就是方法模式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
  &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
      &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
  }
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>javascript基础知识复习（四）递归与闭包</title>
      <link>https://chenxiaolani.com/2017/javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%E5%9B%9B%E9%80%92%E5%BD%92%E4%B8%8E%E9%97%AD%E5%8C%85/</link>
      <pubDate>Wed, 09 Aug 2017 17:55:48 +0000</pubDate>
      
      <guid>https://chenxiaolani.com/2017/javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%E5%9B%9B%E9%80%92%E5%BD%92%E4%B8%8E%E9%97%AD%E5%8C%85/</guid>
      <description>&lt;h2 id=&#34;递归&#34;&gt;递归&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;递归概念：在函数内调用函数自己，就是递归。 注意：递归要有结束条件，没有递归结束条件的递归，就是死递归。&lt;/li&gt;
&lt;li&gt;使用递归的方法：化归思想。化归思想是将一个问题由难化易，由繁化简，由复杂化简单的过程称为化归，它是转化和归结的简称。
例子：求1-100的和 利用划归思想：var sum=foo(100); 1.求foo（100）即求foo（99）+100； 2.求foo（99），即求foo（98）+99； 3.求foo（98），即求foo（97）+98； &amp;hellip; 最后求foo（1），就是1;//这就是约束条件 最后利用递归，函数就是：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;利用递归可以解决很多问题，比如算出阶乘，算出斐波那契数列等；&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>javascript基础知识复习（三）js中的继承</title>
      <link>https://chenxiaolani.com/2017/javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%E4%B8%89js%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Mon, 07 Aug 2017 15:37:44 +0000</pubDate>
      
      <guid>https://chenxiaolani.com/2017/javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%E4%B8%89js%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/</guid>
      <description>js中共有6种继承 一、原型链
function SuperType(){ this.prototype=true; } SuperType.prototype.getSuperValue=function(){ return this.property } function SubType(){ this.subPrototy=false; } //继承了SuperType SubType.prototype=new SuperType(); SubType.prototype.getSubValue=function(){ return this.subProperty; } var instance = new SubType(); console,log(instance.getSuperValue);//true console.log(instance.getSubValue);//false 以上代码我们可以看到定义两个构造函数，里面有属性，原型里面有方法，我们让SubType的原型等于SuperType的实例，通过替换了SubType的默认原型对象实现继承，我们可以看到SubType的实例成功调用SuperType里的方法，之后我们又为其手动添加了一个新的方法也是可以调用的。
注意：继承原型后使用字面量添加方法，会使继承无效，因为已经替换了原型，我们在上一篇中介绍原型时已经讲过。 缺点：（1）继承后的原型对应的构造函数它所有的实例都会共享原型中的方法。 （2）继承的子类和父类，子类是不能向父类传参数的。
二、借用构造函数
function SuperType (){ this.colors=[&amp;#39;red&amp;#39;,&amp;#39;blue&amp;#39;]; } function SubType(){ //用call或者apply将调用对象换成SuperType实现对SuperType函数的继承 //this指向当前对象  SuperType.call(this); } var o=new SubType(); o.colors.push(&amp;#39;black&amp;#39;); console.log(o);//red,blue,black var o1=new SubType(); console.log(o1)//red,blue  //利用call()或apply()在子类函数中调用父类函数实现继承，我们可以看到SubType的实例并不共享属性；而且子类也是可以向父类传参的  function SuperType (name){ this.name=name; } function SubType(){ SuperType.call(this，&amp;#39;lili&amp;#39;); this.age=12; } var o=new SubType(); console.</description>
    </item>
    
    <item>
      <title>javascript基础知识复习（二）面向对象</title>
      <link>https://chenxiaolani.com/2017/javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%E4%BA%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sun, 06 Aug 2017 18:36:39 +0000</pubDate>
      
      <guid>https://chenxiaolani.com/2017/javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%E4%BA%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>一、什么是面向对象？与面向过程又有什么关系？
 面向对象是一种思维方式，解决的重点放在对象上； 面向过程也是一种思维方式，解决的重点放在详细的步骤上； 举个例子：如何去超市买东西？  从面向对象的角度出发，我们只需要一辆车，还有自己就好了； 从面向过程的角度出发，我们要先拿钱，打开门，开车，进超市； 一句话概括它们之间的关系就是：面向对象是面向过程的封装。    二、js中的对象
js中键值对的集合就是对象。
三、创建对象的几种方法
 使用字面量创建对象  var 0={name:&amp;#39;lili&amp;#39;,age:&amp;#39;12&amp;#39;}; 这种方法会造成代码冗余，资源浪费；
使用内置构造函数创建对象  var o =new Object(); o.name=&amp;#39;lili&amp;#39;; o.age=&amp;#39;12&amp;#39;; 创建的代码是空对象，需要为其手动添加对象属性；
工厂模式  function createObj(age,name){ var o=new Object(); o.age=age; o.name=name; o.sayHi=function(){ alert(&amp;#39;你好&amp;#39;)； }； return o; } var o1=new createObj(){&amp;#39;12&amp;#39;,&amp;#39;lili&amp;#39;}; 每次调用时都会为这个函数在内存中开辟空间，浪费资源。
自定义构造函数，注意函数名要大写  function MyObj(name,age){ this.name=name; this.age=age; this.sayHi=function(){ console.log(&amp;#39;hi&amp;#39;); }; } var myobj=new MyObj(&amp;#39;lili&amp;#39;,&amp;#39;12&amp;#39;); this指的是new出来的对象（即调用者）,和工厂模式差不多，每次调用的时候都会为里面的函数开辟新的内存地址，但是函数的代码功能却是相同的，造成内存资源浪费。
自定义构造函数模式原型模式组合 所以我们需要引入原型概念，将构造函数里的属性和方法分开，将方法放到原型里实现共享。 原型概念：在构造函数创建出来的时候，系统会默认的帮构造函数创建并关联一个神秘的对象，这个对象就是原型，原型默认的是一个空的对象。 原型中的属性和方法，都可以被使用该构造函数创建出来的对象使用。给原型添加属性和方法可以使用构造函数的prototype属性，所以第四种方法可以这样修改：  function MyObj(name,age){ this.</description>
    </item>
    
    <item>
      <title>javascript基础知识复习（一）基本概念</title>
      <link>https://chenxiaolani.com/2017/javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%E4%B8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 06 Aug 2017 16:50:11 +0000</pubDate>
      
      <guid>https://chenxiaolani.com/2017/javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%E4%B8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>一、js的组成
 ECMAScript：js的核心，规范了js的语法； DOM：文档对象模型，提供了操作DOM元素的API； BOM：浏览器对象模型，对浏览器对象API的操作；  二、js的数据类型
 简单数据类型（也称基本数据类型）：Undefined,Null,Boolean,String,Number; 复杂数据类型：Object，本质由一组无序的名值对组成；  三、js中的部分关键字
 in：判断属性是否存在于对象中，for in遍历对象的键； typeOf:判断对象的类型，返回是String类型； delete：  删除对象的属性; 删除未使用var声明的变量; 返回值为boolean 表示是否删除成功; 注意：删除的属性如果不存在，返回true; 删除的如果是原型中的属性，返回true 但是删除不成功;   ==和=== (a)==：判断值是否相等； (b)===：判断数据类型和值是否相等； ||和&amp;amp;&amp;amp;；  四、js中的值类型和引用类型
 值类型（又叫基本类型）：存储的是数据本身的值，有数值、布尔值、null、 undefined; 值类型赋值：将数据赋值一份给新的变量，两份变量单独存在，互不影响； 引用类型：存储的是数据的地址，而其中的数据会在内存中单独存储； 引用类型赋值：会将存储数据的地址赋值一份，两个地址指向同一个变量，因此， 通过其中一个地址修改变量时，另一个地址指向的变量也会改变；  五、js中的异常处理
 基本格式：  try{ //可能出现异常的代码 } catch(e){ //e就是出现异常的异常信息 //出现异常后的处理代码 } finally{ //不管有没有出现异常，都会执行的代码 //一般用来释放资源 } 如何手动抛出异常： throw 任何东西， catch中会抓到该东西</description>
    </item>
    
  </channel>
</rss>

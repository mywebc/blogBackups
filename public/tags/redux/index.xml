<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redux on 陈晓拉尼</title>
    <link>https://chenxiaolani.com/tags/redux/</link>
    <description>Recent content in redux on 陈晓拉尼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 29 Aug 2018 23:34:46 +0000</lastBuildDate><atom:link href="https://chenxiaolani.com/tags/redux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>redux快速入门</title>
      <link>https://chenxiaolani.com/2018/redux%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 29 Aug 2018 23:34:46 +0000</pubDate>
      
      <guid>https://chenxiaolani.com/2018/redux%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid>
      <description>redux和vuex一样，当项目数据复杂时，都是用来集中管理数据的，不过redux是单向数据流绑定,这就使得redux中的store必须放到所有组件最顶层，此篇文章是在看《深入浅出react与redux》以及实战React16.4开发简书项目后的总结。
 Redux的前身flux 在flux中，首先要引入Dispatcher（redux没有这个）， 用以派发action，action改变view层，view层同步model数据层；flux会为每一个组件单独建立一个store，在每一个组件中初始化store,如下：
const CounterStore = object.assign({}, EventEmitter.prototype, { getCounterValues: function() { return counterValues; }, emitChange: function(){ this.emit(CHANGE_EVENT); }, addChangeListener: function(){ this.on(CHANGE_EVENT, callback); }, removeChangeListener: fucntion(){ this.removeListener(CHANGE_EVENT, callback); } }) EventEmitter是node.js中event模块的一个对象，是监听事件的一个封装，不用太追究；上面扩展了EventEmitter.prototype，给当前组件的store绑定了几个事件；初始化store之后，还要与dispatcher做联系，这时候会用到dispatcher的一个register函数，接受参数为action；
Dispatcher是唯一的，如果有很多个组件，Dispatcher与他们每一个组件都要做联系，通过waitFor函数来决定各个store之间的执行顺序，但这就是flux最大的缺点，因为如果store很多的话，依赖关系会越来越复杂，逻辑关系会难以维护。
Redux 在Redux中没有了Dispatcher的概念，store倒是有一个dispatch方法，用以来传递action给store 如图,解释一下流程
 在组件内部会调用actionCreators，用于创建action对象，并且通过dispatch传送给store； store接受到后，会交给reducer（纯函数） 处理； reducer函数处理后会返回新的store状态； store里的数据发生变化会自动触发视图层变化，结束；  下面会一一解释store，reducer，action如何创建，并且如何走通。 首先创建一个store文件夹，下面会有四个js，分别是
 index.js // 作为入口，统一引入到这里 actionCreators.js // 用来统一创建对象 constants.js // 统一定义action的type,方便后期维护log reducer.js // 用来处理action的纯函数  关于action  分割action为actionCreators和contants,方便管理维护
 actionCreators.js
import * as constants from &amp;#39;.</description>
    </item>
    
  </channel>
</rss>

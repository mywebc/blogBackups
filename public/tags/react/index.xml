<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react on 陈晓拉尼</title>
    <link>https://chenxiaolani.com/tags/react/</link>
    <description>Recent content in react on 陈晓拉尼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sat, 28 Sep 2019 21:32:59 +0000</lastBuildDate><atom:link href="https://chenxiaolani.com/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>无意间用了React Portals</title>
      <link>https://chenxiaolani.com/2019/%E6%97%A0%E6%84%8F%E9%97%B4%E7%94%A8%E4%BA%86react-portals/</link>
      <pubDate>Sat, 28 Sep 2019 21:32:59 +0000</pubDate>
      
      <guid>https://chenxiaolani.com/2019/%E6%97%A0%E6%84%8F%E9%97%B4%E7%94%A8%E4%BA%86react-portals/</guid>
      <description> 不知哪天随手点开了一篇react portals的文章,眼前一亮,竟然还没有我听说过的react的特性,在看了大概之后,并没有觉得有什么用,不过最近在做开发时,还正好和需求对上了.
 什么是react portal  portal(入口)能够允许我们将自己的组件挂到一个另一个时空的指定节点去,这个节点跟我们当前的DOM树没有半毛钱关系;  ReactDOM.createPortal(child, container)  第一个参数即为自定义组件,第二个参数即为指定节点  portal出现的意义  如果在原有DOM树插入组件,影响DOM结构; 样式污染,组件所需数据流向混乱;  示例 export default class YourComponent extends Component&amp;lt;YourComponentProps,YourComponentState&amp;gt; { private portalNode: HTMLDivElement; constructor(props: YourComponentProps) { super(props); const doc = window.document; this.portalNode = doc.createElement(&amp;#39;div&amp;#39;); doc.body.appendChild(this.portalNode); } componentWillUnmount() { window.document.body.removeChild(this.portalNode); } render() { return createPortal( &amp;lt;div&amp;gt; // your code...  &amp;lt;/div&amp;gt;, this.portalNode ) } } 支持事件冒泡  虽然说portal传送的节点与原本的DOM树没关系,但是这个组件还是支持事件冒泡的,在原本的父节点上同样能够监听到组件的事件;具体示例可以直接看官网; react portals  总结  portal因为能跳出原来DOM节点,一般为用在弹框和提示框这种独立性强的组件上;  </description>
    </item>
    
    <item>
      <title>React Hooks实践</title>
      <link>https://chenxiaolani.com/2019/react-hooks%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Fri, 02 Aug 2019 21:51:06 +0000</pubDate>
      
      <guid>https://chenxiaolani.com/2019/react-hooks%E5%AE%9E%E8%B7%B5/</guid>
      <description>React Hook 是React16.8提出来的一个新特性，其意义就在于我们可以让函数组件变得跟类组件一样有能力管理自己的状态，这意味着我们以后写的所有组件都可以是Function，对于初学者来说降低了学习成本（压根不用管this是个啥），而且我们可以自定义hook，能够提高状态逻辑的复用，从而也便于维护。
 State Hooks useState  react为我们提供了useState这个函数，使用此函数就可以取代我们之前的每个组件的状态管理了；  import { useState } from &amp;#39;react&amp;#39; function count() { // useState函数为我们解构了一个变量num和一个setNum函数，并且将变量初始值赋值为“0”  const [num, setNum] = useState(&amp;#34;0&amp;#34;); // 我们在这里读取num的值， 并且每点击一次按钮都会使num+1  return &amp;lt;button onClick={() =&amp;gt; {setNum(num + 1)}}&amp;gt;{num}&amp;lt;/button&amp;gt; }  当我们每次改变num的值时，就会重新执行count函数，不过不用担心，num的初始化只会执行一次;  useReducer  其实useState也是基于useReducer的，用过redux的人对reducer不陌生，reducer是一个纯函数，会根据action中type的不同返回改变后新的状态;  import { useReducer } from &amp;#39;react&amp;#39; // 创建一个reducer function myReducer(state, action){ switch(action.type) { case &amp;#34;add&amp;#34;: return state + 1 case &amp;#34;minus&amp;#34;: return state -1 default: return state } } // 函数组件 function count() { // 传入reducer和初始值  const [num, dispatchNum] = useReducer(myReducer, &amp;#34;0&amp;#34;); return &amp;lt;button onClick={() =&amp;gt; {dispatchNum({type: &amp;#34;add&amp;#34;})}}&amp;gt;{num}&amp;lt;/button&amp;gt; } Effect Hook  Effect Hook可以看作是代替了一些生命周期函数  import { useState, useEffect } from &amp;#39;react&amp;#39; function count() { const [num, setNum] = useState(&amp;#34;0&amp;#34;); useEffect(() =&amp;gt; { const interval = setInterval(() =&amp;gt; { setNum(num + 1) }, 1000) // 最后要return一下，记得清除定时器  return () =&amp;gt; clearInterval(interval) }, [num]) return &amp;lt;button onClick={() =&amp;gt; {setNum(num + 1)}}&amp;gt;{num}&amp;lt;/button&amp;gt; }  useEffect函数中第一个参数为组件第一次渲染时执行的函数（最后return的是定时器卸载的函数，可以看作是componentWillUnMount生命周期内做的事），第二参数表示依赖的值，只有依赖的值变化时，useEffect才会重新执行；  Context Hook  顾名思义这是一个上下文hook  // 新建一个context文件myContext.</description>
    </item>
    
    <item>
      <title>antd design 中表格数据导出为excel(支持多表头)</title>
      <link>https://chenxiaolani.com/2019/antd-design-%E4%B8%AD%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA%E4%B8%BAexcel-%E6%94%AF%E6%8C%81%E5%A4%9A%E8%A1%A8%E5%A4%B4/</link>
      <pubDate>Tue, 02 Jul 2019 15:52:10 +0000</pubDate>
      
      <guid>https://chenxiaolani.com/2019/antd-design-%E4%B8%AD%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA%E4%B8%BAexcel-%E6%94%AF%E6%8C%81%E5%A4%9A%E8%A1%A8%E5%A4%B4/</guid>
      <description>在之前的项目中遇到一个需求，需要支持将antd design 中表格数据（多表头）导出到excel,看了网上的例子很少，这里就记录一下。
  主要用到了better-xlsx和file-saver两个库  import { File } from &amp;#39;better-xlsx&amp;#39;; import { saveAs } from &amp;#39;file-saver&amp;#39;; function ExportExcel(column, dataSource, fileName = &amp;#39;example&amp;#39;) { // 新建工作谱  const file = new File(); // 新建表  let sheet = file.addSheet(&amp;#39;sheet-test&amp;#39;); // 获取表头行数  let depth = getDepth(column); // 获取表头的列数  let columnNum = getColumns(column); // 新建表头行数  let rowArr = []; for (let k = 0; k &amp;lt; depth; k++) { rowArr.</description>
    </item>
    
  </channel>
</rss>
